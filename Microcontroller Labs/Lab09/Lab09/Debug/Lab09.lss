
Lab09.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800100  00800100  00000370  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a2b  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000070a  00000000  00000000  00000e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000519  00000000  00000000  00001595  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00001ab0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000478  00000000  00000000  00001bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001cc  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002234  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 77 01 	call	0x2ee	; 0x2ee <main>
  9e:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_4>:
uint8_t b = 8;
uint8_t c = 12;
uint8_t d = 16;


ISR(PCINT1_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	ef 93       	push	r30
  be:	ff 93       	push	r31
	currPins = PINC;
  c0:	86 b1       	in	r24, 0x06	; 6
  c2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <currPins>
	prevPins = prevSensors;
  c6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <prevSensors>
  ca:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <prevPins>
	prevSensors = PINC;
  ce:	86 b1       	in	r24, 0x06	; 6
  d0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <prevSensors>
	count = TCNT1;
  d4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
  d8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  dc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <count+0x1>
  e0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <count>
	for(uint8_t i = 0; i < 5; ++i){
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	36 c0       	rjmp	.+108    	; 0x154 <__vector_4+0xae>
		if(hasBeenRead[i] != 1){
  e8:	28 2f       	mov	r18, r24
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	f9 01       	movw	r30, r18
  ee:	ec 5f       	subi	r30, 0xFC	; 252
  f0:	fe 4f       	sbci	r31, 0xFE	; 254
  f2:	90 81       	ld	r25, Z
  f4:	91 30       	cpi	r25, 0x01	; 1
  f6:	69 f1       	breq	.+90     	; 0x152 <__vector_4+0xac>
			if(currPins % 2 != prevPins % 2){
  f8:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <currPins>
  fc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <prevPins>
 100:	94 27       	eor	r25, r20
 102:	90 ff       	sbrs	r25, 0
 104:	1c c0       	rjmp	.+56     	; 0x13e <__vector_4+0x98>
				dischargeTime[i] = count;
 106:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <count>
 10a:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <count+0x1>
 10e:	f9 01       	movw	r30, r18
 110:	ee 0f       	add	r30, r30
 112:	ff 1f       	adc	r31, r31
 114:	e0 5f       	subi	r30, 0xF0	; 240
 116:	fe 4f       	sbci	r31, 0xFE	; 254
 118:	51 83       	std	Z+1, r21	; 0x01
 11a:	40 83       	st	Z, r20
				hasBeenRead[i] = 1;
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	f9 01       	movw	r30, r18
 120:	ec 5f       	subi	r30, 0xFC	; 252
 122:	fe 4f       	sbci	r31, 0xFE	; 254
 124:	90 83       	st	Z, r25
				if(count <= THRESHOLD){
 126:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <count>
 12a:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <count+0x1>
 12e:	41 30       	cpi	r20, 0x01	; 1
 130:	52 40       	sbci	r21, 0x02	; 2
 132:	28 f4       	brcc	.+10     	; 0x13e <__vector_4+0x98>
					state[i] = 1;
 134:	f9 01       	movw	r30, r18
 136:	e7 5f       	subi	r30, 0xF7	; 247
 138:	fe 4f       	sbci	r31, 0xFE	; 254
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	90 83       	st	Z, r25
				}
			}
			currPins = currPins >> 1;
 13e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <currPins>
 142:	96 95       	lsr	r25
 144:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <currPins>
			prevPins = prevPins >> 1;
 148:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <prevPins>
 14c:	96 95       	lsr	r25
 14e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <prevPins>
ISR(PCINT1_vect){
	currPins = PINC;
	prevPins = prevSensors;
	prevSensors = PINC;
	count = TCNT1;
	for(uint8_t i = 0; i < 5; ++i){
 152:	8f 5f       	subi	r24, 0xFF	; 255
 154:	85 30       	cpi	r24, 0x05	; 5
 156:	40 f2       	brcs	.-112    	; 0xe8 <__vector_4+0x42>
			}
			currPins = currPins >> 1;
			prevPins = prevPins >> 1;
		}
	}
}
 158:	ff 91       	pop	r31
 15a:	ef 91       	pop	r30
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	5f 91       	pop	r21
 162:	4f 91       	pop	r20
 164:	3f 91       	pop	r19
 166:	2f 91       	pop	r18
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <__vector_11>:

ISR(TIMER1_COMPA_vect){
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	2f 93       	push	r18
 17e:	3f 93       	push	r19
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	ef 93       	push	r30
 186:	ff 93       	push	r31
	timedout = 1;
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	for(uint8_t i = 0; i < 5; ++i){
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	16 c0       	rjmp	.+44     	; 0x1be <__vector_11+0x4c>
		if(hasBeenRead[i] != 1){
 192:	82 2f       	mov	r24, r18
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	fc 01       	movw	r30, r24
 198:	ec 5f       	subi	r30, 0xFC	; 252
 19a:	fe 4f       	sbci	r31, 0xFE	; 254
 19c:	30 81       	ld	r19, Z
 19e:	31 30       	cpi	r19, 0x01	; 1
 1a0:	69 f0       	breq	.+26     	; 0x1bc <__vector_11+0x4a>
			state[i] = 0;
 1a2:	fc 01       	movw	r30, r24
 1a4:	e7 5f       	subi	r30, 0xF7	; 247
 1a6:	fe 4f       	sbci	r31, 0xFE	; 254
 1a8:	10 82       	st	Z, r1
			dischargeTime[i] = 0xFFFF;
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	fc 01       	movw	r30, r24
 1b0:	e0 5f       	subi	r30, 0xF0	; 240
 1b2:	fe 4f       	sbci	r31, 0xFE	; 254
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	9f ef       	ldi	r25, 0xFF	; 255
 1b8:	91 83       	std	Z+1, r25	; 0x01
 1ba:	80 83       	st	Z, r24
	}
}

ISR(TIMER1_COMPA_vect){
	timedout = 1;
	for(uint8_t i = 0; i < 5; ++i){
 1bc:	2f 5f       	subi	r18, 0xFF	; 255
 1be:	25 30       	cpi	r18, 0x05	; 5
 1c0:	40 f3       	brcs	.-48     	; 0x192 <__vector_11+0x20>
		if(hasBeenRead[i] != 1){
			state[i] = 0;
			dischargeTime[i] = 0xFFFF;
		}
	}
}
 1c2:	ff 91       	pop	r31
 1c4:	ef 91       	pop	r30
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <motorSetup>:


void motorSetup(void){
	//Turn off motors
	DDRB = (1 << DDB3);
 1d8:	88 e0       	ldi	r24, 0x08	; 8
 1da:	84 b9       	out	0x04, r24	; 4
	DDRD = (1 << DDD3) | (1 << DDD5) | (1 << DDD6);
 1dc:	88 e6       	ldi	r24, 0x68	; 104
 1de:	8a b9       	out	0x0a, r24	; 10
	PORTB = 0x00;
 1e0:	15 b8       	out	0x05, r1	; 5
	PORTD = 0x00;
 1e2:	1b b8       	out	0x0b, r1	; 11
	TCCR0A = 0;
 1e4:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
 1e6:	15 bc       	out	0x25, r1	; 37
	TCCR0A = _BV(COM0A1) | _BV(COM0A0) | _BV(COM0B1) | _BV(COM0B0) |_BV(WGM01) | _BV(WGM00);
 1e8:	83 ef       	ldi	r24, 0xF3	; 243
 1ea:	84 bd       	out	0x24, r24	; 36
	TCCR0B = _BV(CS01) | _BV(CS00);
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	85 bd       	out	0x25, r24	; 37

	TCCR2A = 0;
 1f0:	a0 eb       	ldi	r26, 0xB0	; 176
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	1c 92       	st	X, r1
	TCCR2B = 0;
 1f6:	e1 eb       	ldi	r30, 0xB1	; 177
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	10 82       	st	Z, r1
	TCCR2A = _BV(COM2A1) | _BV(COM2A0) | _BV(COM2B1) | _BV(COM2B1) | _BV(WGM01) | _BV(WGM00);
 1fc:	93 ee       	ldi	r25, 0xE3	; 227
 1fe:	9c 93       	st	X, r25
	TCCR2B = _BV(CS21) | _BV(CS20);
 200:	80 83       	st	Z, r24



	OCR0A = 0; //Left Forward Direction = 0
 202:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0; //Left Backward Direction = 0
 204:	18 bc       	out	0x28, r1	; 40
	OCR2A = 0; //Right Forward Direction = 0
 206:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0; //Right Forward Direction = 0
 20a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 20e:	08 95       	ret

00000210 <interruptsOFF>:



void interruptsOFF(void){
	//Turns off interrupts
	cli();
 210:	f8 94       	cli
	PCICR &= ~(1 << PCIE1);
 212:	e8 e6       	ldi	r30, 0x68	; 104
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	8d 7f       	andi	r24, 0xFD	; 253
 21a:	80 83       	st	Z, r24
 21c:	08 95       	ret

0000021e <interruptsON>:
}

void interruptsON(void){
	//Turns on Interrupts
	sei();
 21e:	78 94       	sei
	PCICR = (1 << PCIE1);
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK1 = (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11) | (1 << PCINT12);
 226:	8f e1       	ldi	r24, 0x1F	; 31
 228:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
 22c:	08 95       	ret

0000022e <LEDsOFF>:
}

void LEDsOFF(void){
	DDRC |= (1 << DDC5);
 22e:	87 b1       	in	r24, 0x07	; 7
 230:	80 62       	ori	r24, 0x20	; 32
 232:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << PORTC5);
 234:	88 b1       	in	r24, 0x08	; 8
 236:	8f 7d       	andi	r24, 0xDF	; 223
 238:	88 b9       	out	0x08, r24	; 8
 23a:	08 95       	ret

0000023c <LEDsON>:
}

void LEDsON(void){
	DDRC |= (1 << DDC5);
 23c:	87 b1       	in	r24, 0x07	; 7
 23e:	80 62       	ori	r24, 0x20	; 32
 240:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC5);
 242:	88 b1       	in	r24, 0x08	; 8
 244:	80 62       	ori	r24, 0x20	; 32
 246:	88 b9       	out	0x08, r24	; 8
 248:	08 95       	ret

0000024a <charge>:
}

void charge(void){
	DDRC |= (1 << DDC0) | (1 << DDC1) | (1 << DDC2) | (1 << DDC3) | (1 << DDC4);
 24a:	87 b1       	in	r24, 0x07	; 7
 24c:	8f 61       	ori	r24, 0x1F	; 31
 24e:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC0) | (1 << PORTC1) | (1 << PORTC2) | (1 << PORTC3) | (1 << PORTC4);
 250:	88 b1       	in	r24, 0x08	; 8
 252:	8f 61       	ori	r24, 0x1F	; 31
 254:	88 b9       	out	0x08, r24	; 8
 256:	08 95       	ret

00000258 <discharge>:
}

void discharge(void){
	DDRC &= ~((1 << DDC0) | (1 << DDC1) | (1 << DDC2) | (1 << DDC3) | (1 << DDC4));
 258:	87 b1       	in	r24, 0x07	; 7
 25a:	80 7e       	andi	r24, 0xE0	; 224
 25c:	87 b9       	out	0x07, r24	; 7
 25e:	08 95       	ret

00000260 <startTimer>:
}

void startTimer(void){
	OCR1A = TIMEOUT;
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	96 e0       	ldi	r25, 0x06	; 6
 264:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 268:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A);
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TCCR1A = (1 << COM1A0);
 272:	80 e4       	ldi	r24, 0x40	; 64
 274:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << CS11) | (1 << CS10);
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 27e:	08 95       	ret

00000280 <clearAll>:
	
}

void clearAll(void){
	TCCR1A = 0;
 280:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = 0;
 284:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = 0;
 288:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 28c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = 0;
 290:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	PORTC = 0x00;
 294:	18 b8       	out	0x08, r1	; 8
	timedout = 0;
 296:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
	for(uint8_t i = 0; i < 5; ++i){
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	0c c0       	rjmp	.+24     	; 0x2b6 <clearAll+0x36>
		state[i] = 1;
 29e:	82 2f       	mov	r24, r18
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	fc 01       	movw	r30, r24
 2a4:	e7 5f       	subi	r30, 0xF7	; 247
 2a6:	fe 4f       	sbci	r31, 0xFE	; 254
 2a8:	31 e0       	ldi	r19, 0x01	; 1
 2aa:	30 83       	st	Z, r19
		hasBeenRead[i] = 0;
 2ac:	fc 01       	movw	r30, r24
 2ae:	ec 5f       	subi	r30, 0xFC	; 252
 2b0:	fe 4f       	sbci	r31, 0xFE	; 254
 2b2:	10 82       	st	Z, r1
	TCCR1B = 0;
	OCR1A = 0;
	TIMSK1 = 0;
	PORTC = 0x00;
	timedout = 0;
	for(uint8_t i = 0; i < 5; ++i){
 2b4:	2f 5f       	subi	r18, 0xFF	; 255
 2b6:	25 30       	cpi	r18, 0x05	; 5
 2b8:	90 f3       	brcs	.-28     	; 0x29e <clearAll+0x1e>
		state[i] = 1;
		hasBeenRead[i] = 0;
	}
}
 2ba:	08 95       	ret

000002bc <readSensors>:


void readSensors(void){
	interruptsOFF();
 2bc:	0e 94 08 01 	call	0x210	; 0x210 <interruptsOFF>
	for(i = 0; i < 5; ++i){
		state[i] = a%2;
		a = a >> 1;
	}
	*/
	LEDsOFF();
 2c0:	0e 94 17 01 	call	0x22e	; 0x22e <LEDsOFF>
	clearAll();
 2c4:	0e 94 40 01 	call	0x280	; 0x280 <clearAll>
	charge();
 2c8:	0e 94 25 01 	call	0x24a	; 0x24a <charge>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2cc:	82 e4       	ldi	r24, 0x42	; 66
 2ce:	8a 95       	dec	r24
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <readSensors+0x12>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <readSensors+0x18>
	_delay_us(10);
	LEDsON();
 2d4:	0e 94 1e 01 	call	0x23c	; 0x23c <LEDsON>
	startTimer();
 2d8:	0e 94 30 01 	call	0x260	; 0x260 <startTimer>
	discharge();
 2dc:	0e 94 2c 01 	call	0x258	; 0x258 <discharge>
	interruptsON();
 2e0:	0e 94 0f 01 	call	0x21e	; 0x21e <interruptsON>
	while(timedout != 1)
 2e4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <readSensors+0x28>
	{}
	
	
}
 2ec:	08 95       	ret

000002ee <main>:

int main(void)
{
	motorSetup();
 2ee:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <motorSetup>
	while (1) {
		readSensors();		
 2f2:	0e 94 5e 01 	call	0x2bc	; 0x2bc <readSensors>
 2f6:	fd cf       	rjmp	.-6      	; 0x2f2 <main+0x4>

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
