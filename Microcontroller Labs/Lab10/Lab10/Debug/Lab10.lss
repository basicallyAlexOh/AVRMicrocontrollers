
Lab10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000057e  00000612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800106  00800106  00000618  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000648  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f47  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000787  00000000  00000000  00001697  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e1  00000000  00000000  00001e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00002600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000050c  00000000  00000000  000027d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036d  00000000  00000000  00002cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003049  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_4>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_11>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	bc 01       	movw	r22, r24
  6a:	cb 01       	movw	r24, r22
  6c:	da 01       	movw	r26, r20
  6e:	e9 01       	movw	r28, r18
  70:	f8 01       	movw	r30, r16
  72:	01 02       	muls	r16, r17
  74:	10 02       	muls	r17, r16
  76:	1f 02       	muls	r17, r31
  78:	2e 02       	muls	r18, r30

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	11 e0       	ldi	r17, 0x01	; 1
  88:	a0 e0       	ldi	r26, 0x00	; 0
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	ee e7       	ldi	r30, 0x7E	; 126
  8e:	f5 e0       	ldi	r31, 0x05	; 5
  90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
  92:	05 90       	lpm	r0, Z+
  94:	0d 92       	st	X+, r0
  96:	a6 30       	cpi	r26, 0x06	; 6
  98:	b1 07       	cpc	r27, r17
  9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	a6 e0       	ldi	r26, 0x06	; 6
  a0:	b1 e0       	ldi	r27, 0x01	; 1
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a0 32       	cpi	r26, 0x20	; 32
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 ac 02 	call	0x558	; 0x558 <main>
  b0:	0c 94 bd 02 	jmp	0x57a	; 0x57a <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <__vector_4>:
void readToMem(void){
	uint8_t* p1 = 0x03F4;
	for(uint8_t i = 0; i < 5; ++i){
		*(p1+i) = hasBeenRead[i];
	}
}
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	2f 93       	push	r18
  c4:	3f 93       	push	r19
  c6:	4f 93       	push	r20
  c8:	5f 93       	push	r21
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
  d2:	86 b1       	in	r24, 0x06	; 6
  d4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <currPins>
  d8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <prevSensors>
  dc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <prevPins>
  e0:	86 b1       	in	r24, 0x06	; 6
  e2:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <prevSensors>
  e6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
  ea:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  ee:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <count+0x1>
  f2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <count>
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	36 c0       	rjmp	.+108    	; 0x166 <__vector_4+0xae>
  fa:	28 2f       	mov	r18, r24
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	f9 01       	movw	r30, r18
 100:	e6 5f       	subi	r30, 0xF6	; 246
 102:	fe 4f       	sbci	r31, 0xFE	; 254
 104:	90 81       	ld	r25, Z
 106:	91 30       	cpi	r25, 0x01	; 1
 108:	69 f1       	breq	.+90     	; 0x164 <__vector_4+0xac>
 10a:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <currPins>
 10e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <prevPins>
 112:	94 27       	eor	r25, r20
 114:	90 ff       	sbrs	r25, 0
 116:	1c c0       	rjmp	.+56     	; 0x150 <__vector_4+0x98>
 118:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <count>
 11c:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <count+0x1>
 120:	f9 01       	movw	r30, r18
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	ea 5e       	subi	r30, 0xEA	; 234
 128:	fe 4f       	sbci	r31, 0xFE	; 254
 12a:	51 83       	std	Z+1, r21	; 0x01
 12c:	40 83       	st	Z, r20
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	f9 01       	movw	r30, r18
 132:	e6 5f       	subi	r30, 0xF6	; 246
 134:	fe 4f       	sbci	r31, 0xFE	; 254
 136:	90 83       	st	Z, r25
 138:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <count>
 13c:	50 91 15 01 	lds	r21, 0x0115	; 0x800115 <count+0x1>
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	52 40       	sbci	r21, 0x02	; 2
 144:	28 f4       	brcc	.+10     	; 0x150 <__vector_4+0x98>
 146:	f9 01       	movw	r30, r18
 148:	e1 5f       	subi	r30, 0xF1	; 241
 14a:	fe 4f       	sbci	r31, 0xFE	; 254
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	90 83       	st	Z, r25
 150:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <currPins>
 154:	96 95       	lsr	r25
 156:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <currPins>
 15a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <prevPins>
 15e:	96 95       	lsr	r25
 160:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <prevPins>
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	85 30       	cpi	r24, 0x05	; 5
 168:	40 f2       	brcs	.-112    	; 0xfa <__vector_4+0x42>
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	9f 91       	pop	r25
 170:	8f 91       	pop	r24
 172:	5f 91       	pop	r21
 174:	4f 91       	pop	r20
 176:	3f 91       	pop	r19
 178:	2f 91       	pop	r18
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <__vector_11>:
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	16 c0       	rjmp	.+44     	; 0x1d0 <__vector_11+0x4c>
 1a4:	82 2f       	mov	r24, r18
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	fc 01       	movw	r30, r24
 1aa:	e6 5f       	subi	r30, 0xF6	; 246
 1ac:	fe 4f       	sbci	r31, 0xFE	; 254
 1ae:	30 81       	ld	r19, Z
 1b0:	31 30       	cpi	r19, 0x01	; 1
 1b2:	69 f0       	breq	.+26     	; 0x1ce <__vector_11+0x4a>
 1b4:	fc 01       	movw	r30, r24
 1b6:	e1 5f       	subi	r30, 0xF1	; 241
 1b8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ba:	10 82       	st	Z, r1
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	fc 01       	movw	r30, r24
 1c2:	ea 5e       	subi	r30, 0xEA	; 234
 1c4:	fe 4f       	sbci	r31, 0xFE	; 254
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	9f ef       	ldi	r25, 0xFF	; 255
 1ca:	91 83       	std	Z+1, r25	; 0x01
 1cc:	80 83       	st	Z, r24
 1ce:	2f 5f       	subi	r18, 0xFF	; 255
 1d0:	25 30       	cpi	r18, 0x05	; 5
 1d2:	40 f3       	brcs	.-48     	; 0x1a4 <__vector_11+0x20>
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	3f 91       	pop	r19
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <motorSetup>:
 1ea:	88 e0       	ldi	r24, 0x08	; 8
 1ec:	84 b9       	out	0x04, r24	; 4
 1ee:	88 e6       	ldi	r24, 0x68	; 104
 1f0:	8a b9       	out	0x0a, r24	; 10
 1f2:	15 b8       	out	0x05, r1	; 5
 1f4:	1b b8       	out	0x0b, r1	; 11
 1f6:	14 bc       	out	0x24, r1	; 36
 1f8:	15 bc       	out	0x25, r1	; 37
 1fa:	93 ec       	ldi	r25, 0xC3	; 195
 1fc:	94 bd       	out	0x24, r25	; 36
 1fe:	83 e0       	ldi	r24, 0x03	; 3
 200:	85 bd       	out	0x25, r24	; 37
 202:	a0 eb       	ldi	r26, 0xB0	; 176
 204:	b0 e0       	ldi	r27, 0x00	; 0
 206:	1c 92       	st	X, r1
 208:	e1 eb       	ldi	r30, 0xB1	; 177
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	10 82       	st	Z, r1
 20e:	9c 93       	st	X, r25
 210:	80 83       	st	Z, r24
 212:	17 bc       	out	0x27, r1	; 39
 214:	18 bc       	out	0x28, r1	; 40
 216:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 21a:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 21e:	08 95       	ret

00000220 <leftSpeed>:
 220:	87 bd       	out	0x27, r24	; 39
 222:	08 95       	ret

00000224 <rightSpeed>:
 224:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 228:	08 95       	ret

0000022a <leftForward>:
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	0e 94 10 01 	call	0x220	; 0x220 <leftSpeed>
 230:	08 95       	ret

00000232 <rightForward>:
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	0e 94 12 01 	call	0x224	; 0x224 <rightSpeed>
 238:	08 95       	ret

0000023a <interruptsOFF>:
 23a:	f8 94       	cli
 23c:	e8 e6       	ldi	r30, 0x68	; 104
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	8d 7f       	andi	r24, 0xFD	; 253
 244:	80 83       	st	Z, r24
 246:	08 95       	ret

00000248 <interruptsON>:
 248:	78 94       	sei
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
 250:	8f e1       	ldi	r24, 0x1F	; 31
 252:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
 256:	08 95       	ret

00000258 <LEDsOFF>:
 258:	87 b1       	in	r24, 0x07	; 7
 25a:	80 62       	ori	r24, 0x20	; 32
 25c:	87 b9       	out	0x07, r24	; 7
 25e:	88 b1       	in	r24, 0x08	; 8
 260:	8f 7d       	andi	r24, 0xDF	; 223
 262:	88 b9       	out	0x08, r24	; 8
 264:	08 95       	ret

00000266 <LEDsON>:
 266:	87 b1       	in	r24, 0x07	; 7
 268:	80 62       	ori	r24, 0x20	; 32
 26a:	87 b9       	out	0x07, r24	; 7
 26c:	88 b1       	in	r24, 0x08	; 8
 26e:	80 62       	ori	r24, 0x20	; 32
 270:	88 b9       	out	0x08, r24	; 8
 272:	08 95       	ret

00000274 <charge>:
 274:	87 b1       	in	r24, 0x07	; 7
 276:	8f 61       	ori	r24, 0x1F	; 31
 278:	87 b9       	out	0x07, r24	; 7
 27a:	88 b1       	in	r24, 0x08	; 8
 27c:	8f 61       	ori	r24, 0x1F	; 31
 27e:	88 b9       	out	0x08, r24	; 8
 280:	08 95       	ret

00000282 <discharge>:
 282:	87 b1       	in	r24, 0x07	; 7
 284:	80 7e       	andi	r24, 0xE0	; 224
 286:	87 b9       	out	0x07, r24	; 7
 288:	08 95       	ret

0000028a <startTimer>:
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	96 e0       	ldi	r25, 0x06	; 6
 28e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 292:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 29c:	80 e4       	ldi	r24, 0x40	; 64
 29e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 2a8:	08 95       	ret

000002aa <clearAll>:
 2aa:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 2ae:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 2b2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2b6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 2ba:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 2be:	18 b8       	out	0x08, r1	; 8
 2c0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 2c4:	20 e0       	ldi	r18, 0x00	; 0
 2c6:	0c c0       	rjmp	.+24     	; 0x2e0 <clearAll+0x36>
 2c8:	82 2f       	mov	r24, r18
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	fc 01       	movw	r30, r24
 2ce:	e1 5f       	subi	r30, 0xF1	; 241
 2d0:	fe 4f       	sbci	r31, 0xFE	; 254
 2d2:	31 e0       	ldi	r19, 0x01	; 1
 2d4:	30 83       	st	Z, r19
 2d6:	fc 01       	movw	r30, r24
 2d8:	e6 5f       	subi	r30, 0xF6	; 246
 2da:	fe 4f       	sbci	r31, 0xFE	; 254
 2dc:	10 82       	st	Z, r1
 2de:	2f 5f       	subi	r18, 0xFF	; 255
 2e0:	25 30       	cpi	r18, 0x05	; 5
 2e2:	90 f3       	brcs	.-28     	; 0x2c8 <clearAll+0x1e>
 2e4:	08 95       	ret

000002e6 <stateToMem>:
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	0a c0       	rjmp	.+20     	; 0x2fe <stateToMem+0x18>
 2ea:	82 2f       	mov	r24, r18
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	fc 01       	movw	r30, r24
 2f0:	fc 5f       	subi	r31, 0xFC	; 252
 2f2:	dc 01       	movw	r26, r24
 2f4:	a1 5f       	subi	r26, 0xF1	; 241
 2f6:	be 4f       	sbci	r27, 0xFE	; 254
 2f8:	8c 91       	ld	r24, X
 2fa:	80 83       	st	Z, r24
 2fc:	2f 5f       	subi	r18, 0xFF	; 255
 2fe:	25 30       	cpi	r18, 0x05	; 5
 300:	a0 f3       	brcs	.-24     	; 0x2ea <stateToMem+0x4>
 302:	08 95       	ret

00000304 <timeToMem>:
void timeToMem(void){
	uint16_t* p1 = 0x40C;
	for(uint8_t i = 0; i < 5; ++i){
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	0f c0       	rjmp	.+30     	; 0x326 <timeToMem+0x22>
		*(p1+i) = dischargeTime[i];
 308:	82 2f       	mov	r24, r18
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	fc 01       	movw	r30, r24
 312:	e4 5f       	subi	r30, 0xF4	; 244
 314:	fb 4f       	sbci	r31, 0xFB	; 251
 316:	dc 01       	movw	r26, r24
 318:	aa 5e       	subi	r26, 0xEA	; 234
 31a:	be 4f       	sbci	r27, 0xFE	; 254
 31c:	8d 91       	ld	r24, X+
 31e:	9c 91       	ld	r25, X
 320:	91 83       	std	Z+1, r25	; 0x01
 322:	80 83       	st	Z, r24
		*(p1+i) = hasBeenRead[i];
	}
}
void timeToMem(void){
	uint16_t* p1 = 0x40C;
	for(uint8_t i = 0; i < 5; ++i){
 324:	2f 5f       	subi	r18, 0xFF	; 255
 326:	25 30       	cpi	r18, 0x05	; 5
 328:	78 f3       	brcs	.-34     	; 0x308 <timeToMem+0x4>
		*(p1+i) = dischargeTime[i];
	}
}
 32a:	08 95       	ret

0000032c <readSensors>:

void readSensors(void){
	interruptsOFF();
 32c:	0e 94 1d 01 	call	0x23a	; 0x23a <interruptsOFF>
	for(i = 0; i < 5; ++i){
		state[i] = a%2;
		a = a >> 1;
	}
	*/
	stateToMem();
 330:	0e 94 73 01 	call	0x2e6	; 0x2e6 <stateToMem>
	LEDsOFF();
 334:	0e 94 2c 01 	call	0x258	; 0x258 <LEDsOFF>
	clearAll();
 338:	0e 94 55 01 	call	0x2aa	; 0x2aa <clearAll>
	charge();
 33c:	0e 94 3a 01 	call	0x274	; 0x274 <charge>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 340:	82 e4       	ldi	r24, 0x42	; 66
 342:	8a 95       	dec	r24
 344:	f1 f7       	brne	.-4      	; 0x342 <readSensors+0x16>
 346:	00 c0       	rjmp	.+0      	; 0x348 <readSensors+0x1c>
	_delay_us(10);
	LEDsON();
 348:	0e 94 33 01 	call	0x266	; 0x266 <LEDsON>
	startTimer();
 34c:	0e 94 45 01 	call	0x28a	; 0x28a <startTimer>
	discharge();
 350:	0e 94 41 01 	call	0x282	; 0x282 <discharge>
	interruptsON();
 354:	0e 94 24 01 	call	0x248	; 0x248 <interruptsON>
	while(timedout != 1)
 358:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	e1 f7       	brne	.-8      	; 0x358 <readSensors+0x2c>
	{}
	
	
}
 360:	08 95       	ret

00000362 <setMotors>:
		setMotors((uint8_t) 10);
	}
}

void setMotors(uint8_t state){
	switch(state){
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	fc 01       	movw	r30, r24
 366:	31 97       	sbiw	r30, 0x01	; 1
 368:	e9 30       	cpi	r30, 0x09	; 9
 36a:	f1 05       	cpc	r31, r1
 36c:	08 f0       	brcs	.+2      	; 0x370 <setMotors+0xe>
 36e:	85 c0       	rjmp	.+266    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 370:	ec 5c       	subi	r30, 0xCC	; 204
 372:	ff 4f       	sbci	r31, 0xFF	; 255
 374:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__tablejump2__>
		case 1:
			leftForward(Lbase - d);
 378:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Lbase>
 37c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 380:	89 1b       	sub	r24, r25
 382:	0e 94 15 01 	call	0x22a	; 0x22a <leftForward>
			rightForward(Rbase + d);
 386:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Rbase>
 38a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 38e:	89 0f       	add	r24, r25
 390:	0e 94 19 01 	call	0x232	; 0x232 <rightForward>
			break;
 394:	08 95       	ret
		case 2:
			leftForward(Lbase - c);
 396:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Lbase>
 39a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <c>
 39e:	89 1b       	sub	r24, r25
 3a0:	0e 94 15 01 	call	0x22a	; 0x22a <leftForward>
			rightForward(Rbase + c);
 3a4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Rbase>
 3a8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <c>
 3ac:	89 0f       	add	r24, r25
 3ae:	0e 94 19 01 	call	0x232	; 0x232 <rightForward>
			break;
 3b2:	08 95       	ret
		case 3:
			leftForward(Lbase - b);
 3b4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Lbase>
 3b8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <b>
 3bc:	89 1b       	sub	r24, r25
 3be:	0e 94 15 01 	call	0x22a	; 0x22a <leftForward>
			rightForward(Rbase + b);
 3c2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Rbase>
 3c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <b>
 3ca:	89 0f       	add	r24, r25
 3cc:	0e 94 19 01 	call	0x232	; 0x232 <rightForward>
			break;
 3d0:	08 95       	ret
		case 4:
			leftForward(Lbase - a);
 3d2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Lbase>
 3d6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <a>
 3da:	89 1b       	sub	r24, r25
 3dc:	0e 94 15 01 	call	0x22a	; 0x22a <leftForward>
			rightForward(Rbase + a);
 3e0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <Rbase>
 3e4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <a>
 3e8:	89 0f       	add	r24, r25
 3ea:	0e 94 19 01 	call	0x232	; 0x232 <rightForward>
			break;
 3ee:	08 95       	ret
		case 5:
			leftForward(Lbase);
 3f0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Lbase>
 3f4:	0e 94 15 01 	call	0x22a	; 0x22a <leftForward>
			rightForward(Rbase);
 3f8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Rbase>
 3fc:	0e 94 19 01 	call	0x232	; 0x232 <rightForward>
			break;
 400:	08 95       	ret
		case 6:
			leftForward(Lbase + a);
 402:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Lbase>
 406:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <a>
 40a:	89 0f       	add	r24, r25
 40c:	0e 94 15 01 	call	0x22a	; 0x22a <leftForward>
			rightForward(Rbase - a);
 410:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Rbase>
 414:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <a>
 418:	89 1b       	sub	r24, r25
 41a:	0e 94 19 01 	call	0x232	; 0x232 <rightForward>
			break;
 41e:	08 95       	ret
		case 7:
			leftForward(Lbase + b);
 420:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Lbase>
 424:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <b>
 428:	89 0f       	add	r24, r25
 42a:	0e 94 15 01 	call	0x22a	; 0x22a <leftForward>
			rightForward(Rbase - b);
 42e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Rbase>
 432:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <b>
 436:	89 1b       	sub	r24, r25
 438:	0e 94 19 01 	call	0x232	; 0x232 <rightForward>
			break;
 43c:	08 95       	ret
		case 8:
			leftForward(Lbase + c);
 43e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Lbase>
 442:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <c>
 446:	89 0f       	add	r24, r25
 448:	0e 94 15 01 	call	0x22a	; 0x22a <leftForward>
			rightForward(Rbase - c);
 44c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Rbase>
 450:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <c>
 454:	89 1b       	sub	r24, r25
 456:	0e 94 19 01 	call	0x232	; 0x232 <rightForward>
			break;
 45a:	08 95       	ret
		case 9:
			leftForward(Lbase + d);
 45c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <Lbase>
 460:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 464:	89 0f       	add	r24, r25
 466:	0e 94 15 01 	call	0x22a	; 0x22a <leftForward>
			rightForward(Rbase - d);
 46a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Rbase>
 46e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 472:	89 1b       	sub	r24, r25
 474:	0e 94 19 01 	call	0x232	; 0x232 <rightForward>
			break;
 478:	08 95       	ret
		default:
			leftSpeed(0,100);
 47a:	64 e6       	ldi	r22, 0x64	; 100
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	0e 94 10 01 	call	0x220	; 0x220 <leftSpeed>
			rightSpeed(100,0);			
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	84 e6       	ldi	r24, 0x64	; 100
 486:	0e 94 12 01 	call	0x224	; 0x224 <rightSpeed>
 48a:	08 95       	ret

0000048c <config>:
	{}
	
	
}
void config(void){
	if(state[0] == 0x01 && state[1] == 0x01){
 48c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <state>
 490:	81 30       	cpi	r24, 0x01	; 1
 492:	49 f4       	brne	.+18     	; 0x4a6 <config+0x1a>
 494:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state+0x1>
 498:	81 30       	cpi	r24, 0x01	; 1
 49a:	29 f4       	brne	.+10     	; 0x4a6 <config+0x1a>
		setMotors((uint8_t) 2);
 49c:	82 e0       	ldi	r24, 0x02	; 2
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 b1 01 	call	0x362	; 0x362 <setMotors>
	{}
	
	
}
void config(void){
	if(state[0] == 0x01 && state[1] == 0x01){
 4a4:	08 95       	ret
		setMotors((uint8_t) 2);
	} else if(state[1] == 0x01 && state[2] == 0x01){
 4a6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state+0x1>
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	49 f4       	brne	.+18     	; 0x4c0 <config+0x34>
 4ae:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <state+0x2>
 4b2:	81 30       	cpi	r24, 0x01	; 1
 4b4:	29 f4       	brne	.+10     	; 0x4c0 <config+0x34>
		setMotors((uint8_t) 4);
 4b6:	84 e0       	ldi	r24, 0x04	; 4
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 b1 01 	call	0x362	; 0x362 <setMotors>
	
}
void config(void){
	if(state[0] == 0x01 && state[1] == 0x01){
		setMotors((uint8_t) 2);
	} else if(state[1] == 0x01 && state[2] == 0x01){
 4be:	08 95       	ret
		setMotors((uint8_t) 4);
	} else if(state[2] == 0x01 && state[3] == 0x01){
 4c0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <state+0x2>
 4c4:	81 30       	cpi	r24, 0x01	; 1
 4c6:	49 f4       	brne	.+18     	; 0x4da <config+0x4e>
 4c8:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <state+0x3>
 4cc:	81 30       	cpi	r24, 0x01	; 1
 4ce:	29 f4       	brne	.+10     	; 0x4da <config+0x4e>
		setMotors((uint8_t) 6);
 4d0:	86 e0       	ldi	r24, 0x06	; 6
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 b1 01 	call	0x362	; 0x362 <setMotors>
void config(void){
	if(state[0] == 0x01 && state[1] == 0x01){
		setMotors((uint8_t) 2);
	} else if(state[1] == 0x01 && state[2] == 0x01){
		setMotors((uint8_t) 4);
	} else if(state[2] == 0x01 && state[3] == 0x01){
 4d8:	08 95       	ret
		setMotors((uint8_t) 6);
	} else if(state[3] == 0x01 && state[4] == 0x01){
 4da:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <state+0x3>
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	49 f4       	brne	.+18     	; 0x4f4 <config+0x68>
 4e2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <state+0x4>
 4e6:	81 30       	cpi	r24, 0x01	; 1
 4e8:	29 f4       	brne	.+10     	; 0x4f4 <config+0x68>
		setMotors((uint8_t) 8);
 4ea:	88 e0       	ldi	r24, 0x08	; 8
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 b1 01 	call	0x362	; 0x362 <setMotors>
		setMotors((uint8_t) 2);
	} else if(state[1] == 0x01 && state[2] == 0x01){
		setMotors((uint8_t) 4);
	} else if(state[2] == 0x01 && state[3] == 0x01){
		setMotors((uint8_t) 6);
	} else if(state[3] == 0x01 && state[4] == 0x01){
 4f2:	08 95       	ret
		setMotors((uint8_t) 8);
	} else if(state[0] == 0x01){
 4f4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <state>
 4f8:	81 30       	cpi	r24, 0x01	; 1
 4fa:	29 f4       	brne	.+10     	; 0x506 <config+0x7a>
		setMotors((uint8_t) 1);
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 b1 01 	call	0x362	; 0x362 <setMotors>
 504:	08 95       	ret
	} else if(state[1] == 0x01){
 506:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <state+0x1>
 50a:	81 30       	cpi	r24, 0x01	; 1
 50c:	29 f4       	brne	.+10     	; 0x518 <config+0x8c>
		setMotors((uint8_t) 3);
 50e:	83 e0       	ldi	r24, 0x03	; 3
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 b1 01 	call	0x362	; 0x362 <setMotors>
 516:	08 95       	ret
	} else if(state[2] == 0x01){
 518:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <state+0x2>
 51c:	81 30       	cpi	r24, 0x01	; 1
 51e:	29 f4       	brne	.+10     	; 0x52a <config+0x9e>
		setMotors((uint8_t) 5);
 520:	85 e0       	ldi	r24, 0x05	; 5
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 b1 01 	call	0x362	; 0x362 <setMotors>
 528:	08 95       	ret
	} else if(state[3] == 0x01){
 52a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <state+0x3>
 52e:	81 30       	cpi	r24, 0x01	; 1
 530:	29 f4       	brne	.+10     	; 0x53c <config+0xb0>
		setMotors((uint8_t) 7);
 532:	87 e0       	ldi	r24, 0x07	; 7
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	0e 94 b1 01 	call	0x362	; 0x362 <setMotors>
 53a:	08 95       	ret
	} else if(state[4] == 0x01){
 53c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <state+0x4>
 540:	81 30       	cpi	r24, 0x01	; 1
 542:	29 f4       	brne	.+10     	; 0x54e <config+0xc2>
		setMotors((uint8_t) 9);
 544:	89 e0       	ldi	r24, 0x09	; 9
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 b1 01 	call	0x362	; 0x362 <setMotors>
 54c:	08 95       	ret
	} else{
		setMotors((uint8_t) 10);
 54e:	8a e0       	ldi	r24, 0x0A	; 10
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	0e 94 b1 01 	call	0x362	; 0x362 <setMotors>
 556:	08 95       	ret

00000558 <main>:



int main(void)
{
	motorSetup();
 558:	0e 94 f5 00 	call	0x1ea	; 0x1ea <motorSetup>
	while (1) {
		readSensors();
 55c:	0e 94 96 01 	call	0x32c	; 0x32c <readSensors>
		timeToMem();
 560:	0e 94 82 01 	call	0x304	; 0x304 <timeToMem>
		stateToMem();
 564:	0e 94 73 01 	call	0x2e6	; 0x2e6 <stateToMem>
		
		config();
 568:	0e 94 46 02 	call	0x48c	; 0x48c <config>
 56c:	f7 cf       	rjmp	.-18     	; 0x55c <main+0x4>

0000056e <__tablejump2__>:
 56e:	ee 0f       	add	r30, r30
 570:	ff 1f       	adc	r31, r31
 572:	05 90       	lpm	r0, Z+
 574:	f4 91       	lpm	r31, Z
 576:	e0 2d       	mov	r30, r0
 578:	09 94       	ijmp

0000057a <_exit>:
 57a:	f8 94       	cli

0000057c <__stop_program>:
 57c:	ff cf       	rjmp	.-2      	; 0x57c <__stop_program>
