
MotorControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000558  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800100  00800100  000005cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d64  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000773  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074e  00000000  00000000  00001b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  000022ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ba  00000000  00000000  00002424  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cc  00000000  00000000  000028de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002baa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3d 00 	jmp	0x7a	; 0x7a <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_4>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_11>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	b0 01       	movw	r22, r0
  6a:	b7 01       	movw	r22, r14
  6c:	be 01       	movw	r22, r28
  6e:	c5 01       	movw	r24, r10
  70:	cc 01       	movw	r24, r24
  72:	d3 01       	movw	r26, r6
  74:	da 01       	movw	r26, r20
  76:	e1 01       	movw	r28, r2
  78:	e8 01       	movw	r28, r16

0000007a <__ctors_end>:
  7a:	11 24       	eor	r1, r1
  7c:	1f be       	out	0x3f, r1	; 63
  7e:	cf ef       	ldi	r28, 0xFF	; 255
  80:	d8 e0       	ldi	r29, 0x08	; 8
  82:	de bf       	out	0x3e, r29	; 62
  84:	cd bf       	out	0x3d, r28	; 61

00000086 <__do_copy_data>:
  86:	11 e0       	ldi	r17, 0x01	; 1
  88:	a0 e0       	ldi	r26, 0x00	; 0
  8a:	b1 e0       	ldi	r27, 0x01	; 1
  8c:	e8 e5       	ldi	r30, 0x58	; 88
  8e:	f5 e0       	ldi	r31, 0x05	; 5
  90:	02 c0       	rjmp	.+4      	; 0x96 <__do_copy_data+0x10>
  92:	05 90       	lpm	r0, Z+
  94:	0d 92       	st	X+, r0
  96:	a0 30       	cpi	r26, 0x00	; 0
  98:	b1 07       	cpc	r27, r17
  9a:	d9 f7       	brne	.-10     	; 0x92 <__do_copy_data+0xc>

0000009c <__do_clear_bss>:
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b1 e0       	ldi	r27, 0x01	; 1
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <.do_clear_bss_start>

000000a4 <.do_clear_bss_loop>:
  a4:	1d 92       	st	X+, r1

000000a6 <.do_clear_bss_start>:
  a6:	a9 32       	cpi	r26, 0x29	; 41
  a8:	b2 07       	cpc	r27, r18
  aa:	e1 f7       	brne	.-8      	; 0xa4 <.do_clear_bss_loop>
  ac:	0e 94 53 02 	call	0x4a6	; 0x4a6 <main>
  b0:	0c 94 aa 02 	jmp	0x554	; 0x554 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <__vector_4>:
	PORTC &= ~(1 << PORTC5);

}

void LEDON(void){
	PORTC |= (1 << PORTC5);
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	2f 93       	push	r18
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
  cc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
  d0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  d4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <currCount+0x1>
  d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <currCount>
  dc:	86 b1       	in	r24, 0x06	; 6
  de:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <currPinC>
  e2:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <prevPinC>
  e6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <currPinC>
  ea:	89 27       	eor	r24, r25
  ec:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <xorPinC>
  f0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <currPinC>
  f4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <prevPinC>
  f8:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <counter>
  fc:	3f c0       	rjmp	.+126    	; 0x17c <__vector_4+0xc4>
  fe:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <xorPinC>
 102:	80 ff       	sbrs	r24, 0
 104:	31 c0       	rjmp	.+98     	; 0x168 <__vector_4+0xb0>
 106:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <counter>
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	e4 5f       	subi	r30, 0xF4	; 244
 10e:	fe 4f       	sbci	r31, 0xFE	; 254
 110:	80 81       	ld	r24, Z
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	49 f1       	breq	.+82     	; 0x168 <__vector_4+0xb0>
 116:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <counter>
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <currCount>
 120:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <currCount+0x1>
 124:	ee 0f       	add	r30, r30
 126:	ff 1f       	adc	r31, r31
 128:	e0 50       	subi	r30, 0x00	; 0
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	91 83       	std	Z+1, r25	; 0x01
 12e:	80 83       	st	Z, r24
 130:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <currCount>
 134:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <currCount+0x1>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	94 40       	sbci	r25, 0x04	; 4
 13c:	40 f0       	brcs	.+16     	; 0x14e <__vector_4+0x96>
 13e:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <counter>
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	e9 5e       	subi	r30, 0xE9	; 233
 146:	fe 4f       	sbci	r31, 0xFE	; 254
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 83       	st	Z, r24
 14c:	06 c0       	rjmp	.+12     	; 0x15a <__vector_4+0xa2>
 14e:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <counter>
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	e9 5e       	subi	r30, 0xE9	; 233
 156:	fe 4f       	sbci	r31, 0xFE	; 254
 158:	10 82       	st	Z, r1
 15a:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <counter>
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	e4 5f       	subi	r30, 0xF4	; 244
 162:	fe 4f       	sbci	r31, 0xFE	; 254
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 83       	st	Z, r24
 168:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <xorPinC>
 16c:	86 95       	lsr	r24
 16e:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <xorPinC>
 172:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <counter>
 176:	8f 5f       	subi	r24, 0xFF	; 255
 178:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <counter>
 17c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <counter>
 180:	85 30       	cpi	r24, 0x05	; 5
 182:	08 f4       	brcc	.+2      	; 0x186 <__vector_4+0xce>
 184:	bc cf       	rjmp	.-136    	; 0xfe <__vector_4+0x46>
 186:	ff 91       	pop	r31
 188:	ef 91       	pop	r30
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	2f 91       	pop	r18
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <__vector_11>:
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
 1ac:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <counter>
 1b0:	25 c0       	rjmp	.+74     	; 0x1fc <__vector_11+0x62>
 1b2:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <counter>
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	e4 5f       	subi	r30, 0xF4	; 244
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	80 81       	ld	r24, Z
 1be:	81 11       	cpse	r24, r1
 1c0:	18 c0       	rjmp	.+48     	; 0x1f2 <__vector_11+0x58>
 1c2:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <counter>
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	e4 5f       	subi	r30, 0xF4	; 244
 1ca:	fe 4f       	sbci	r31, 0xFE	; 254
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 83       	st	Z, r24
 1d0:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <counter>
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	e9 5e       	subi	r30, 0xE9	; 233
 1d8:	fe 4f       	sbci	r31, 0xFE	; 254
 1da:	80 83       	st	Z, r24
 1dc:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <counter>
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	ee 0f       	add	r30, r30
 1e4:	ff 1f       	adc	r31, r31
 1e6:	e0 50       	subi	r30, 0x00	; 0
 1e8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	9b e0       	ldi	r25, 0x0B	; 11
 1ee:	91 83       	std	Z+1, r25	; 0x01
 1f0:	80 83       	st	Z, r24
 1f2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <counter>
 1f6:	8f 5f       	subi	r24, 0xFF	; 255
 1f8:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <counter>
 1fc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <counter>
 200:	85 30       	cpi	r24, 0x05	; 5
 202:	b8 f2       	brcs	.-82     	; 0x1b2 <__vector_11+0x18>
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	9f 91       	pop	r25
 20a:	8f 91       	pop	r24
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <init>:
 216:	87 b1       	in	r24, 0x07	; 7
 218:	80 62       	ori	r24, 0x20	; 32
 21a:	87 b9       	out	0x07, r24	; 7
 21c:	18 b8       	out	0x08, r1	; 8
 21e:	08 95       	ret

00000220 <LEDOFF>:
 220:	88 b1       	in	r24, 0x08	; 8
 222:	8f 7d       	andi	r24, 0xDF	; 223
 224:	88 b9       	out	0x08, r24	; 8
 226:	08 95       	ret

00000228 <readSensors>:
}

void readSensors(void){
	cli();
 228:	f8 94       	cli
	LEDOFF();
 22a:	0e 94 10 01 	call	0x220	; 0x220 <LEDOFF>
	
	
	prevPinC = (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0);
 22e:	8f e1       	ldi	r24, 0x1F	; 31
 230:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <prevPinC>
	for(uint8_t i = 0; i < 5; ++i){
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	0e c0       	rjmp	.+28     	; 0x254 <readSensors+0x2c>
		hasBeenRead[i] = 0;
 238:	82 2f       	mov	r24, r18
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	fc 01       	movw	r30, r24
 23e:	e4 5f       	subi	r30, 0xF4	; 244
 240:	fe 4f       	sbci	r31, 0xFE	; 254
 242:	10 82       	st	Z, r1
		times[i] = 0;
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	fc 01       	movw	r30, r24
 24a:	e0 50       	subi	r30, 0x00	; 0
 24c:	ff 4f       	sbci	r31, 0xFF	; 255
 24e:	11 82       	std	Z+1, r1	; 0x01
 250:	10 82       	st	Z, r1
	cli();
	LEDOFF();
	
	
	prevPinC = (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0);
	for(uint8_t i = 0; i < 5; ++i){
 252:	2f 5f       	subi	r18, 0xFF	; 255
 254:	25 30       	cpi	r18, 0x05	; 5
 256:	80 f3       	brcs	.-32     	; 0x238 <readSensors+0x10>
		hasBeenRead[i] = 0;
		times[i] = 0;
	}
	PORTC = 0x00;
 258:	18 b8       	out	0x08, r1	; 8
	TCNT1 = 0;
 25a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 25e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1A = 0;
 262:	a0 e8       	ldi	r26, 0x80	; 128
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	1c 92       	st	X, r1
	TCCR1B = 0;
 268:	e1 e8       	ldi	r30, 0x81	; 129
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	10 82       	st	Z, r1
	TCCR1C = 0;
 26e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
	
	TCCR1A = (1 << COM1A1) | (0 << COM1A0);
 272:	80 e8       	ldi	r24, 0x80	; 128
 274:	8c 93       	st	X, r24
	OCR1A = TIMEOUT;
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	9b e0       	ldi	r25, 0x0B	; 11
 27a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 27e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A);
 282:	92 e0       	ldi	r25, 0x02	; 2
 284:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	
	//charge capacitors
	DDRC |= (1 << DDC0) | (1 << DDC1) | (1 << DDC2) | (1 << DDC3) | (1 << DDC4);
 288:	87 b1       	in	r24, 0x07	; 7
 28a:	8f 61       	ori	r24, 0x1F	; 31
 28c:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC0) | (1 << PORTC1) | (1 << PORTC2) | (1 << PORTC3) | (1 << PORTC4);
 28e:	88 b1       	in	r24, 0x08	; 8
 290:	8f 61       	ori	r24, 0x1F	; 31
 292:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 294:	82 e4       	ldi	r24, 0x42	; 66
 296:	8a 95       	dec	r24
 298:	f1 f7       	brne	.-4      	; 0x296 <readSensors+0x6e>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <readSensors+0x74>
	_delay_us(10);
	
	//LEDs ON
	DDRC |= (1 << DDC5);
 29c:	87 b1       	in	r24, 0x07	; 7
 29e:	80 62       	ori	r24, 0x20	; 32
 2a0:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC5);
 2a2:	88 b1       	in	r24, 0x08	; 8
 2a4:	80 62       	ori	r24, 0x20	; 32
 2a6:	88 b9       	out	0x08, r24	; 8
	
	TCCR1B = (1 << CS11);
 2a8:	90 83       	st	Z, r25
	DDRC &= ~((1 << DDC0) | (1 << DDC1) | (1 << DDC2) | (1 << DDC3) | (1 << DDC4));
 2aa:	87 b1       	in	r24, 0x07	; 7
 2ac:	80 7e       	andi	r24, 0xE0	; 224
 2ae:	87 b9       	out	0x07, r24	; 7
	
	//Interrupts on
	PCICR |= (1 << PCIE1);
 2b0:	e8 e6       	ldi	r30, 0x68	; 104
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	82 60       	ori	r24, 0x02	; 2
 2b8:	80 83       	st	Z, r24
	PCMSK1 |= 0x1F;
 2ba:	ec e6       	ldi	r30, 0x6C	; 108
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	8f 61       	ori	r24, 0x1F	; 31
 2c2:	80 83       	st	Z, r24
	
	
	sei();
 2c4:	78 94       	sei
	while(1)
	{
		if(hasBeenRead[0] == 1 && hasBeenRead[1] == 1 && hasBeenRead[2] == 1 && hasBeenRead[3] == 1 && hasBeenRead[4] == 1){
 2c6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <hasBeenRead>
 2ca:	81 30       	cpi	r24, 0x01	; 1
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <readSensors+0x9e>
 2ce:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <hasBeenRead+0x1>
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	c1 f7       	brne	.-16     	; 0x2c6 <readSensors+0x9e>
 2d6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <hasBeenRead+0x2>
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	a1 f7       	brne	.-24     	; 0x2c6 <readSensors+0x9e>
 2de:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <hasBeenRead+0x3>
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	81 f7       	brne	.-32     	; 0x2c6 <readSensors+0x9e>
 2e6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <hasBeenRead+0x4>
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	61 f7       	brne	.-40     	; 0x2c6 <readSensors+0x9e>
			break;
		}
	}
	
	TCCR1B = 0;
 2ee:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 2f2:	08 95       	ret

000002f4 <motorSetup>:

}

void motorSetup(void){
	//Turn off motors
	DDRB = (1 << DDB3);
 2f4:	88 e0       	ldi	r24, 0x08	; 8
 2f6:	84 b9       	out	0x04, r24	; 4
	DDRD = (1 << DDD3) | (1 << DDD5) | (1 << DDD6);
 2f8:	88 e6       	ldi	r24, 0x68	; 104
 2fa:	8a b9       	out	0x0a, r24	; 10
	PORTB = 0x00;
 2fc:	15 b8       	out	0x05, r1	; 5
	PORTD = 0x00;
 2fe:	1b b8       	out	0x0b, r1	; 11
	
		
	TCCR0A = 0;
 300:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
 302:	15 bc       	out	0x25, r1	; 37
	TCCR0A = _BV(COM0A1) | _BV(COM0A0) | _BV(COM0B1) | _BV(COM0B0) |_BV(WGM01) | _BV(WGM00);
 304:	93 ef       	ldi	r25, 0xF3	; 243
 306:	94 bd       	out	0x24, r25	; 36
	TCCR0B = _BV(CS01) | _BV(CS00);
 308:	83 e0       	ldi	r24, 0x03	; 3
 30a:	85 bd       	out	0x25, r24	; 37
		
	TCCR2A = 0;
 30c:	a0 eb       	ldi	r26, 0xB0	; 176
 30e:	b0 e0       	ldi	r27, 0x00	; 0
 310:	1c 92       	st	X, r1
	TCCR2B = 0;
 312:	e1 eb       	ldi	r30, 0xB1	; 177
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	10 82       	st	Z, r1
	TCCR2A = _BV(COM2A1) | _BV(COM2A0) | _BV(COM2B1) | _BV(COM2B0) | _BV(WGM01) | _BV(WGM00);
 318:	9c 93       	st	X, r25
	TCCR2B = _BV(CS21) | _BV(CS20);
 31a:	80 83       	st	Z, r24

	OCR0A = 0; //Left Forward Direction = 0
 31c:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0; //Left Backward Direction = 0
 31e:	18 bc       	out	0x28, r1	; 40
	OCR2A = 0; //Right Forward Direction = 0
 320:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0; //Right Forward Direction = 0
 324:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 328:	08 95       	ret

0000032a <leftSpeed>:
}

void leftSpeed(uint8_t forwardSpeed, uint8_t backwardSpeed){
	OCR0A = backwardSpeed;
 32a:	67 bd       	out	0x27, r22	; 39
	OCR0B = forwardSpeed;
 32c:	88 bd       	out	0x28, r24	; 40
 32e:	08 95       	ret

00000330 <rightSpeed>:
}
void rightSpeed(uint8_t forwardSpeed, uint8_t backwardSpeed){
	OCR2A = backwardSpeed;
 330:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = forwardSpeed;
 334:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 338:	08 95       	ret

0000033a <leftForward>:
}

void leftForward(uint8_t speed){
	leftSpeed(speed, 0);
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	0e 94 95 01 	call	0x32a	; 0x32a <leftSpeed>
 340:	08 95       	ret

00000342 <rightForward>:
}

void rightForward(uint8_t speed){
	rightSpeed(speed, 0);
 342:	60 e0       	ldi	r22, 0x00	; 0
 344:	0e 94 98 01 	call	0x330	; 0x330 <rightSpeed>
 348:	08 95       	ret

0000034a <setMotors>:
		setMotors((uint8_t) 10);
	}
}

void setMotors(uint8_t state){
	switch(state){
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	fc 01       	movw	r30, r24
 34e:	31 97       	sbiw	r30, 0x01	; 1
 350:	e9 30       	cpi	r30, 0x09	; 9
 352:	f1 05       	cpc	r31, r1
 354:	08 f0       	brcs	.+2      	; 0x358 <setMotors+0xe>
 356:	43 c0       	rjmp	.+134    	; 0x3de <setMotors+0x94>
 358:	ec 5c       	subi	r30, 0xCC	; 204
 35a:	ff 4f       	sbci	r31, 0xFF	; 255
 35c:	0c 94 a4 02 	jmp	0x548	; 0x548 <__tablejump2__>
		case 1:
			leftForward(Lbase - d);
 360:	8a e0       	ldi	r24, 0x0A	; 10
 362:	0e 94 9d 01 	call	0x33a	; 0x33a <leftForward>
			rightForward(Rbase + d);
 366:	8a e5       	ldi	r24, 0x5A	; 90
 368:	0e 94 a1 01 	call	0x342	; 0x342 <rightForward>
			break;
 36c:	08 95       	ret
		case 2:
			leftForward(Lbase - c);
 36e:	8f e0       	ldi	r24, 0x0F	; 15
 370:	0e 94 9d 01 	call	0x33a	; 0x33a <leftForward>
			rightForward(Rbase + c);
 374:	85 e5       	ldi	r24, 0x55	; 85
 376:	0e 94 a1 01 	call	0x342	; 0x342 <rightForward>
			break;
 37a:	08 95       	ret
		case 3:
			leftForward(Lbase - b);
 37c:	84 e1       	ldi	r24, 0x14	; 20
 37e:	0e 94 9d 01 	call	0x33a	; 0x33a <leftForward>
			rightForward(Rbase + b);
 382:	80 e5       	ldi	r24, 0x50	; 80
 384:	0e 94 a1 01 	call	0x342	; 0x342 <rightForward>
			break;
 388:	08 95       	ret
		case 4:
			leftForward(Lbase - a);
 38a:	89 e1       	ldi	r24, 0x19	; 25
 38c:	0e 94 9d 01 	call	0x33a	; 0x33a <leftForward>
			rightForward(Rbase + a);
 390:	8b e4       	ldi	r24, 0x4B	; 75
 392:	0e 94 a1 01 	call	0x342	; 0x342 <rightForward>
			break;
 396:	08 95       	ret
		case 5:
			leftForward(Lbase);
 398:	82 e3       	ldi	r24, 0x32	; 50
 39a:	0e 94 9d 01 	call	0x33a	; 0x33a <leftForward>
			rightForward(Rbase);
 39e:	82 e3       	ldi	r24, 0x32	; 50
 3a0:	0e 94 a1 01 	call	0x342	; 0x342 <rightForward>
			break;
 3a4:	08 95       	ret
		case 6:
			leftForward(Lbase + a);
 3a6:	8b e4       	ldi	r24, 0x4B	; 75
 3a8:	0e 94 9d 01 	call	0x33a	; 0x33a <leftForward>
			rightForward(Rbase - a);
 3ac:	89 e1       	ldi	r24, 0x19	; 25
 3ae:	0e 94 a1 01 	call	0x342	; 0x342 <rightForward>
			break;
 3b2:	08 95       	ret
		case 7:
			leftForward(Lbase + b);
 3b4:	80 e5       	ldi	r24, 0x50	; 80
 3b6:	0e 94 9d 01 	call	0x33a	; 0x33a <leftForward>
			rightForward(Rbase - b);
 3ba:	84 e1       	ldi	r24, 0x14	; 20
 3bc:	0e 94 a1 01 	call	0x342	; 0x342 <rightForward>
			break;
 3c0:	08 95       	ret
		case 8:
			leftForward(Lbase + c);
 3c2:	85 e5       	ldi	r24, 0x55	; 85
 3c4:	0e 94 9d 01 	call	0x33a	; 0x33a <leftForward>
			rightForward(Rbase - c);
 3c8:	8f e0       	ldi	r24, 0x0F	; 15
 3ca:	0e 94 a1 01 	call	0x342	; 0x342 <rightForward>
			break;
 3ce:	08 95       	ret
		case 9:
			leftForward(Lbase + d);
 3d0:	8a e5       	ldi	r24, 0x5A	; 90
 3d2:	0e 94 9d 01 	call	0x33a	; 0x33a <leftForward>
			rightForward(Rbase - d);
 3d6:	8a e0       	ldi	r24, 0x0A	; 10
 3d8:	0e 94 a1 01 	call	0x342	; 0x342 <rightForward>
			break;
 3dc:	08 95       	ret
		default:
			leftSpeed(0,0);
 3de:	60 e0       	ldi	r22, 0x00	; 0
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	0e 94 95 01 	call	0x32a	; 0x32a <leftSpeed>
			rightSpeed(0,0);
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 98 01 	call	0x330	; 0x330 <rightSpeed>
 3ee:	08 95       	ret

000003f0 <config>:
	rightSpeed(speed, 0);
}


void config(void){
	if(state[0] == 0x01 && state[1] == 0x01){
 3f0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <state>
 3f4:	81 30       	cpi	r24, 0x01	; 1
 3f6:	41 f4       	brne	.+16     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3f8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <state+0x1>
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	21 f4       	brne	.+8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		setMotors((uint8_t) 2);
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	0e 94 a5 01 	call	0x34a	; 0x34a <setMotors>
 406:	08 95       	ret
	} else if(state[1] == 0x01 && state[2] == 0x01){
 408:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <state+0x1>
 40c:	81 30       	cpi	r24, 0x01	; 1
 40e:	41 f4       	brne	.+16     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 410:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <state+0x2>
 414:	81 30       	cpi	r24, 0x01	; 1
 416:	21 f4       	brne	.+8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
		setMotors((uint8_t) 4);
 418:	84 e0       	ldi	r24, 0x04	; 4
 41a:	0e 94 a5 01 	call	0x34a	; 0x34a <setMotors>
 41e:	08 95       	ret
	} else if(state[2] == 0x01 && state[3] == 0x01){
 420:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <state+0x2>
 424:	81 30       	cpi	r24, 0x01	; 1
 426:	41 f4       	brne	.+16     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 428:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <state+0x3>
 42c:	81 30       	cpi	r24, 0x01	; 1
 42e:	21 f4       	brne	.+8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
		setMotors((uint8_t) 6);
 430:	86 e0       	ldi	r24, 0x06	; 6
 432:	0e 94 a5 01 	call	0x34a	; 0x34a <setMotors>
 436:	08 95       	ret
	} else if(state[3] == 0x01 && state[4] == 0x01){
 438:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <state+0x3>
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	41 f4       	brne	.+16     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 440:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <state+0x4>
 444:	81 30       	cpi	r24, 0x01	; 1
 446:	21 f4       	brne	.+8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		setMotors((uint8_t) 8);
 448:	88 e0       	ldi	r24, 0x08	; 8
 44a:	0e 94 a5 01 	call	0x34a	; 0x34a <setMotors>
 44e:	08 95       	ret
	} else if(state[0] == 0x01){
 450:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <state>
 454:	81 30       	cpi	r24, 0x01	; 1
 456:	19 f4       	brne	.+6      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
		setMotors((uint8_t) 1);
 458:	0e 94 a5 01 	call	0x34a	; 0x34a <setMotors>
 45c:	08 95       	ret
	} else if(state[1] == 0x01){
 45e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <state+0x1>
 462:	81 30       	cpi	r24, 0x01	; 1
 464:	21 f4       	brne	.+8      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
		setMotors((uint8_t) 3);
 466:	83 e0       	ldi	r24, 0x03	; 3
 468:	0e 94 a5 01 	call	0x34a	; 0x34a <setMotors>
 46c:	08 95       	ret
	} else if(state[2] == 0x01){
 46e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <state+0x2>
 472:	81 30       	cpi	r24, 0x01	; 1
 474:	21 f4       	brne	.+8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
		setMotors((uint8_t) 5);
 476:	85 e0       	ldi	r24, 0x05	; 5
 478:	0e 94 a5 01 	call	0x34a	; 0x34a <setMotors>
 47c:	08 95       	ret
	} else if(state[3] == 0x01){
 47e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <state+0x3>
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	21 f4       	brne	.+8      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
		setMotors((uint8_t) 7);
 486:	87 e0       	ldi	r24, 0x07	; 7
 488:	0e 94 a5 01 	call	0x34a	; 0x34a <setMotors>
 48c:	08 95       	ret
	} else if(state[4] == 0x01){
 48e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <state+0x4>
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	21 f4       	brne	.+8      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
		setMotors((uint8_t) 9);
 496:	89 e0       	ldi	r24, 0x09	; 9
 498:	0e 94 a5 01 	call	0x34a	; 0x34a <setMotors>
 49c:	08 95       	ret
	} else{
		setMotors((uint8_t) 10);
 49e:	8a e0       	ldi	r24, 0x0A	; 10
 4a0:	0e 94 a5 01 	call	0x34a	; 0x34a <setMotors>
 4a4:	08 95       	ret

000004a6 <main>:


int main(void)
{
	
	motorSetup();
 4a6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <motorSetup>
	init();
 4aa:	0e 94 0b 01 	call	0x216	; 0x216 <init>
	while (1)
	{
		
		
		for(uint8_t i = 0; i < 5; ++i){
 4ae:	20 e0       	ldi	r18, 0x00	; 0
 4b0:	0e c0       	rjmp	.+28     	; 0x4ce <main+0x28>
			cumTimes[i] = 0;
 4b2:	82 2f       	mov	r24, r18
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	fc 01       	movw	r30, r24
 4b8:	ee 0f       	add	r30, r30
 4ba:	ff 1f       	adc	r31, r31
 4bc:	e1 5e       	subi	r30, 0xE1	; 225
 4be:	fe 4f       	sbci	r31, 0xFE	; 254
 4c0:	11 82       	std	Z+1, r1	; 0x01
 4c2:	10 82       	st	Z, r1
			state[i] = 0;
 4c4:	fc 01       	movw	r30, r24
 4c6:	ee 5e       	subi	r30, 0xEE	; 238
 4c8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ca:	10 82       	st	Z, r1
	init();
	while (1)
	{
		
		
		for(uint8_t i = 0; i < 5; ++i){
 4cc:	2f 5f       	subi	r18, 0xFF	; 255
 4ce:	25 30       	cpi	r18, 0x05	; 5
 4d0:	80 f3       	brcs	.-32     	; 0x4b2 <main+0xc>
 4d2:	c0 e0       	ldi	r28, 0x00	; 0
 4d4:	19 c0       	rjmp	.+50     	; 0x508 <main+0x62>
			cumTimes[i] = 0;
			state[i] = 0;
		}
		for(uint8_t i = 0; i < 4; ++i){
			readSensors();
 4d6:	0e 94 14 01 	call	0x228	; 0x228 <readSensors>
			for(uint8_t j = 0; j < 5; ++j){
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	12 c0       	rjmp	.+36     	; 0x502 <main+0x5c>
				cumTimes[j] += times[j];
 4de:	e8 2f       	mov	r30, r24
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	ee 0f       	add	r30, r30
 4e4:	ff 1f       	adc	r31, r31
 4e6:	df 01       	movw	r26, r30
 4e8:	a0 50       	subi	r26, 0x00	; 0
 4ea:	bf 4f       	sbci	r27, 0xFF	; 255
 4ec:	4d 91       	ld	r20, X+
 4ee:	5c 91       	ld	r21, X
 4f0:	e1 5e       	subi	r30, 0xE1	; 225
 4f2:	fe 4f       	sbci	r31, 0xFE	; 254
 4f4:	20 81       	ld	r18, Z
 4f6:	31 81       	ldd	r19, Z+1	; 0x01
 4f8:	24 0f       	add	r18, r20
 4fa:	35 1f       	adc	r19, r21
 4fc:	31 83       	std	Z+1, r19	; 0x01
 4fe:	20 83       	st	Z, r18
			cumTimes[i] = 0;
			state[i] = 0;
		}
		for(uint8_t i = 0; i < 4; ++i){
			readSensors();
			for(uint8_t j = 0; j < 5; ++j){
 500:	8f 5f       	subi	r24, 0xFF	; 255
 502:	85 30       	cpi	r24, 0x05	; 5
 504:	60 f3       	brcs	.-40     	; 0x4de <main+0x38>
		
		for(uint8_t i = 0; i < 5; ++i){
			cumTimes[i] = 0;
			state[i] = 0;
		}
		for(uint8_t i = 0; i < 4; ++i){
 506:	cf 5f       	subi	r28, 0xFF	; 255
 508:	c4 30       	cpi	r28, 0x04	; 4
 50a:	28 f3       	brcs	.-54     	; 0x4d6 <main+0x30>
 50c:	20 e0       	ldi	r18, 0x00	; 0
 50e:	17 c0       	rjmp	.+46     	; 0x53e <main+0x98>
			for(uint8_t j = 0; j < 5; ++j){
				cumTimes[j] += times[j];
			}
		}
		for(uint8_t i = 0; i < 5; ++i){
			if((cumTimes[i] >> 2) < THRESHOLD){
 510:	82 2f       	mov	r24, r18
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	fc 01       	movw	r30, r24
 516:	ee 0f       	add	r30, r30
 518:	ff 1f       	adc	r31, r31
 51a:	e1 5e       	subi	r30, 0xE1	; 225
 51c:	fe 4f       	sbci	r31, 0xFE	; 254
 51e:	40 81       	ld	r20, Z
 520:	51 81       	ldd	r21, Z+1	; 0x01
 522:	41 15       	cp	r20, r1
 524:	50 41       	sbci	r21, 0x10	; 16
 526:	28 f4       	brcc	.+10     	; 0x532 <main+0x8c>
				state[i] = 0;
 528:	fc 01       	movw	r30, r24
 52a:	ee 5e       	subi	r30, 0xEE	; 238
 52c:	fe 4f       	sbci	r31, 0xFE	; 254
 52e:	10 82       	st	Z, r1
 530:	05 c0       	rjmp	.+10     	; 0x53c <main+0x96>
			} else{
				state[i] = 1;
 532:	fc 01       	movw	r30, r24
 534:	ee 5e       	subi	r30, 0xEE	; 238
 536:	fe 4f       	sbci	r31, 0xFE	; 254
 538:	31 e0       	ldi	r19, 0x01	; 1
 53a:	30 83       	st	Z, r19
			readSensors();
			for(uint8_t j = 0; j < 5; ++j){
				cumTimes[j] += times[j];
			}
		}
		for(uint8_t i = 0; i < 5; ++i){
 53c:	2f 5f       	subi	r18, 0xFF	; 255
 53e:	25 30       	cpi	r18, 0x05	; 5
 540:	38 f3       	brcs	.-50     	; 0x510 <main+0x6a>
		for(uint8_t i = 0; i < 5; ++i){
			state[i] = sensorArr[i];
		}
		*/
		
		config();		
 542:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <config>
	}
 546:	b3 cf       	rjmp	.-154    	; 0x4ae <main+0x8>

00000548 <__tablejump2__>:
 548:	ee 0f       	add	r30, r30
 54a:	ff 1f       	adc	r31, r31
 54c:	05 90       	lpm	r0, Z+
 54e:	f4 91       	lpm	r31, Z
 550:	e0 2d       	mov	r30, r0
 552:	09 94       	ijmp

00000554 <_exit>:
 554:	f8 94       	cli

00000556 <__stop_program>:
 556:	ff cf       	rjmp	.-2      	; 0x556 <__stop_program>
