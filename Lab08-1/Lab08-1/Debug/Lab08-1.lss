
Lab08-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000294  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d3e  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f6  00000000  00000000  00001116  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d2  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00001ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042b  00000000  00000000  00001dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000046c  00000000  00000000  00002217  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002683  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 23 01 	call	0x246	; 0x246 <main>
  78:	0c 94 48 01 	jmp	0x290	; 0x290 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
#define F_CPU 20000000
#include <avr/io.h>
#include <avr/delay.h>

void setup(void){
	DDRB = (1 << 3);
  80:	88 e0       	ldi	r24, 0x08	; 8
  82:	84 b9       	out	0x04, r24	; 4
	DDRD = (1 << 3) | (1 << 5) | (1 << 6);
  84:	88 e6       	ldi	r24, 0x68	; 104
  86:	8a b9       	out	0x0a, r24	; 10
  88:	08 95       	ret

0000008a <PWMsetup>:
}

void PWMsetup(void){
	TCCR0A = 0;
  8a:	14 bc       	out	0x24, r1	; 36
    TCCR0B = 0; 
  8c:	15 bc       	out	0x25, r1	; 37
	TCCR0A = _BV(COM0A1) | _BV(COM0A0) | _BV(COM0B1) | _BV(COM0B0) |_BV(WGM01) | _BV(WGM00);
  8e:	93 ef       	ldi	r25, 0xF3	; 243
  90:	94 bd       	out	0x24, r25	; 36
	TCCR0B = _BV(CS01) | _BV(CS00);
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	85 bd       	out	0x25, r24	; 37
	
	TCCR2A = 0;
  96:	a0 eb       	ldi	r26, 0xB0	; 176
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	1c 92       	st	X, r1
	TCCR2B = 0;
  9c:	e1 eb       	ldi	r30, 0xB1	; 177
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	10 82       	st	Z, r1
	TCCR2A = _BV(COM2A1) | _BV(COM2A0) | _BV(COM2B1) | _BV(COM2B0) | _BV(WGM01) | _BV(WGM00);
  a2:	9c 93       	st	X, r25
	TCCR2B = _BV(CS21) | _BV(CS20);
  a4:	80 83       	st	Z, r24
	TCCR2A = (1 << COM2A1) | (1 << COM2A0); //set -> clear at topRight
	TCCR2A |= (1 << WGM01) | (1 << WGM02); //Set WGM01, WGM00 for fast PWM with top
	//TCCR2B = (1 << WGM22); //Set WGM02
	TCCR2B |= (1 << CS22) | (1 << CS21) | (1 << CS20); //No prescaling
*/
	OCR0A = 0; //Left Forward Direction = 0
  a6:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0; //Left Backward Direction = 0
  a8:	18 bc       	out	0x28, r1	; 40
	OCR2A = 0; //Right Forward Direction = 0
  aa:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = 0; //Right Forward Direction = 0
  ae:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
  b2:	08 95       	ret

000000b4 <leftSpeed>:
}

void leftSpeed(uint8_t forwardSpeed, uint8_t backwardSpeed){
	OCR0A = forwardSpeed;
  b4:	87 bd       	out	0x27, r24	; 39
	OCR0B = backwardSpeed;
  b6:	68 bd       	out	0x28, r22	; 40
  b8:	08 95       	ret

000000ba <rightSpeed>:
}
void rightSpeed(uint8_t forwardSpeed, uint8_t backwardSpeed){
	OCR2A = forwardSpeed;
  ba:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	OCR2B = backwardSpeed;
  be:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
  c2:	08 95       	ret

000000c4 <rightFullSpeedTest>:
}



void rightFullSpeedTest(void){
	rightSpeed(255, 0);
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	0e 94 5d 00 	call	0xba	; 0xba <rightSpeed>
	leftSpeed(0,0);
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	0e 94 5a 00 	call	0xb4	; 0xb4 <leftSpeed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	81 e1       	ldi	r24, 0x11	; 17
  d8:	9a e7       	ldi	r25, 0x7A	; 122
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <rightFullSpeedTest+0x16>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <rightFullSpeedTest+0x20>
  e4:	00 00       	nop
	_delay_ms(2000);
	rightSpeed(0,255);
  e6:	6f ef       	ldi	r22, 0xFF	; 255
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 5d 00 	call	0xba	; 0xba <rightSpeed>
	leftSpeed(0,0);
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 5a 00 	call	0xb4	; 0xb4 <leftSpeed>
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	81 e1       	ldi	r24, 0x11	; 17
  fa:	9a e7       	ldi	r25, 0x7A	; 122
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <rightFullSpeedTest+0x38>
 104:	00 c0       	rjmp	.+0      	; 0x106 <rightFullSpeedTest+0x42>
 106:	00 00       	nop
 108:	08 95       	ret

0000010a <testBreak>:
	_delay_ms(2000);
}

void testBreak(void){
	rightSpeed(0,0);
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	0e 94 5d 00 	call	0xba	; 0xba <rightSpeed>
	leftSpeed(0,0);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	0e 94 5a 00 	call	0xb4	; 0xb4 <leftSpeed>
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	81 e1       	ldi	r24, 0x11	; 17
 11e:	9a e7       	ldi	r25, 0x7A	; 122
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <testBreak+0x16>
 128:	00 c0       	rjmp	.+0      	; 0x12a <testBreak+0x20>
 12a:	00 00       	nop
 12c:	08 95       	ret

0000012e <leftFullSpeedTest>:
	_delay_ms(2000);
}

void leftFullSpeedTest(void){
	leftSpeed(255, 0);
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	0e 94 5a 00 	call	0xb4	; 0xb4 <leftSpeed>
	rightSpeed(0,0);
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 5d 00 	call	0xba	; 0xba <rightSpeed>
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	81 e1       	ldi	r24, 0x11	; 17
 142:	9a e7       	ldi	r25, 0x7A	; 122
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <leftFullSpeedTest+0x16>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <leftFullSpeedTest+0x20>
 14e:	00 00       	nop
	_delay_ms(2000);
	leftSpeed(0,255);
 150:	6f ef       	ldi	r22, 0xFF	; 255
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	0e 94 5a 00 	call	0xb4	; 0xb4 <leftSpeed>
	rightSpeed(0,0);
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 5d 00 	call	0xba	; 0xba <rightSpeed>
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	81 e1       	ldi	r24, 0x11	; 17
 164:	9a e7       	ldi	r25, 0x7A	; 122
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <leftFullSpeedTest+0x38>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <leftFullSpeedTest+0x42>
 170:	00 00       	nop
 172:	08 95       	ret

00000174 <forwardTest>:
	_delay_ms(2000);
}

void forwardTest(uint8_t speed){
 174:	cf 93       	push	r28
 176:	c8 2f       	mov	r28, r24
	leftSpeed(speed,0);
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	0e 94 5a 00 	call	0xb4	; 0xb4 <leftSpeed>
	rightSpeed(speed,0);
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	8c 2f       	mov	r24, r28
 182:	0e 94 5d 00 	call	0xba	; 0xba <rightSpeed>
 186:	2f ef       	ldi	r18, 0xFF	; 255
 188:	81 e1       	ldi	r24, 0x11	; 17
 18a:	9a e7       	ldi	r25, 0x7A	; 122
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <forwardTest+0x18>
 194:	00 c0       	rjmp	.+0      	; 0x196 <forwardTest+0x22>
 196:	00 00       	nop
	_delay_ms(2000);

}
 198:	cf 91       	pop	r28
 19a:	08 95       	ret

0000019c <backwardTest>:

void backwardTest(uint8_t speed){
 19c:	cf 93       	push	r28
 19e:	c8 2f       	mov	r28, r24
	leftSpeed(0,speed);
 1a0:	68 2f       	mov	r22, r24
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	0e 94 5a 00 	call	0xb4	; 0xb4 <leftSpeed>
	rightSpeed(0,speed);
 1a8:	6c 2f       	mov	r22, r28
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 5d 00 	call	0xba	; 0xba <rightSpeed>
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	81 e1       	ldi	r24, 0x11	; 17
 1b4:	9a e7       	ldi	r25, 0x7A	; 122
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <backwardTest+0x1a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <backwardTest+0x24>
 1c0:	00 00       	nop
	_delay_ms(2000);
}
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <testCW>:

void testCW(uint8_t speed){
 1c6:	cf 93       	push	r28
 1c8:	c8 2f       	mov	r28, r24
	leftSpeed(0, speed);
 1ca:	68 2f       	mov	r22, r24
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	0e 94 5a 00 	call	0xb4	; 0xb4 <leftSpeed>
	rightSpeed(speed, 0);
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	8c 2f       	mov	r24, r28
 1d6:	0e 94 5d 00 	call	0xba	; 0xba <rightSpeed>
 1da:	2f ef       	ldi	r18, 0xFF	; 255
 1dc:	81 e1       	ldi	r24, 0x11	; 17
 1de:	9a e7       	ldi	r25, 0x7A	; 122
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	80 40       	sbci	r24, 0x00	; 0
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <testCW+0x1a>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <testCW+0x24>
 1ea:	00 00       	nop
	_delay_ms(2000);
}
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <testCCW>:

void testCCW(uint8_t speed){
 1f0:	cf 93       	push	r28
 1f2:	c8 2f       	mov	r28, r24
	leftSpeed(speed, 0);
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	0e 94 5a 00 	call	0xb4	; 0xb4 <leftSpeed>
	rightSpeed(0, speed);
 1fa:	6c 2f       	mov	r22, r28
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 5d 00 	call	0xba	; 0xba <rightSpeed>
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	81 e1       	ldi	r24, 0x11	; 17
 206:	9a e7       	ldi	r25, 0x7A	; 122
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <testCCW+0x18>
 210:	00 c0       	rjmp	.+0      	; 0x212 <testCCW+0x22>
 212:	00 00       	nop
	_delay_ms(2000);
}
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <testRoutine>:

void testRoutine(uint8_t speed){
 218:	cf 93       	push	r28
 21a:	c8 2f       	mov	r28, r24
	forwardTest(speed);
 21c:	0e 94 ba 00 	call	0x174	; 0x174 <forwardTest>
	testBreak();
 220:	0e 94 85 00 	call	0x10a	; 0x10a <testBreak>
	backwardTest(speed);
 224:	8c 2f       	mov	r24, r28
 226:	0e 94 ce 00 	call	0x19c	; 0x19c <backwardTest>
	testBreak();
 22a:	0e 94 85 00 	call	0x10a	; 0x10a <testBreak>
	testCW(speed);
 22e:	8c 2f       	mov	r24, r28
 230:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <testCW>
	testBreak();
 234:	0e 94 85 00 	call	0x10a	; 0x10a <testBreak>
	testCCW(speed);
 238:	8c 2f       	mov	r24, r28
 23a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <testCCW>
	testBreak();
 23e:	0e 94 85 00 	call	0x10a	; 0x10a <testBreak>
}
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <main>:


int main(void)
{
	setup();
 246:	0e 94 40 00 	call	0x80	; 0x80 <setup>
	PWMsetup();
 24a:	0e 94 45 00 	call	0x8a	; 0x8a <PWMsetup>
	
	leftFullSpeedTest();
 24e:	0e 94 97 00 	call	0x12e	; 0x12e <leftFullSpeedTest>
	testBreak();
 252:	0e 94 85 00 	call	0x10a	; 0x10a <testBreak>
	rightFullSpeedTest();
 256:	0e 94 62 00 	call	0xc4	; 0xc4 <rightFullSpeedTest>
	testBreak();
 25a:	0e 94 85 00 	call	0x10a	; 0x10a <testBreak>
	testRoutine(150);
 25e:	86 e9       	ldi	r24, 0x96	; 150
 260:	0e 94 0c 01 	call	0x218	; 0x218 <testRoutine>
	testBreak();
 264:	0e 94 85 00 	call	0x10a	; 0x10a <testBreak>
	testRoutine(64);
 268:	80 e4       	ldi	r24, 0x40	; 64
 26a:	0e 94 0c 01 	call	0x218	; 0x218 <testRoutine>
	testBreak();
 26e:	0e 94 85 00 	call	0x10a	; 0x10a <testBreak>
 272:	24 e5       	ldi	r18, 0x54	; 84
 274:	30 ea       	ldi	r19, 0xA0	; 160
 276:	8c ef       	ldi	r24, 0xFC	; 252
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	21 50       	subi	r18, 0x01	; 1
 27c:	30 40       	sbci	r19, 0x00	; 0
 27e:	80 40       	sbci	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	d9 f7       	brne	.-10     	; 0x27a <main+0x34>
 284:	00 c0       	rjmp	.+0      	; 0x286 <main+0x40>
 286:	00 c0       	rjmp	.+0      	; 0x288 <main+0x42>
 288:	00 00       	nop
	_delay_ms(10000);
}
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	08 95       	ret

00000290 <_exit>:
 290:	f8 94       	cli

00000292 <__stop_program>:
 292:	ff cf       	rjmp	.-2      	; 0x292 <__stop_program>
