
LineSensors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000302  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800100  00800100  00000376  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000376  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008ea  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000702  00000000  00000000  00000d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000489  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  000018b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043d  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000137  00000000  00000000  00001dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001f04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <main>
  9e:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_4>:
	PORTC &= ~(1 << PORTC5);

}

void LEDON(void){
	PORTC |= (1 << PORTC5);
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
  ba:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
  be:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  c2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <currCount+0x1>
  c6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <currCount>
  ca:	86 b1       	in	r24, 0x06	; 6
  cc:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <currPinC>
  d0:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <prevPinC>
  d4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <currPinC>
  d8:	89 27       	eor	r24, r25
  da:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <xorPinC>
  de:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <currPinC>
  e2:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <prevPinC>
  e6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <counter>
  ea:	3f c0       	rjmp	.+126    	; 0x16a <__vector_4+0xc4>
  ec:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <xorPinC>
  f0:	80 ff       	sbrs	r24, 0
  f2:	31 c0       	rjmp	.+98     	; 0x156 <__vector_4+0xb0>
  f4:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <counter>
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	e4 5f       	subi	r30, 0xF4	; 244
  fc:	fe 4f       	sbci	r31, 0xFE	; 254
  fe:	80 81       	ld	r24, Z
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	49 f1       	breq	.+82     	; 0x156 <__vector_4+0xb0>
 104:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <counter>
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <currCount>
 10e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <currCount+0x1>
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	e0 50       	subi	r30, 0x00	; 0
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	91 83       	std	Z+1, r25	; 0x01
 11c:	80 83       	st	Z, r24
 11e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <currCount>
 122:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <currCount+0x1>
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	96 40       	sbci	r25, 0x06	; 6
 12a:	40 f0       	brcs	.+16     	; 0x13c <__vector_4+0x96>
 12c:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <counter>
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	ee 5e       	subi	r30, 0xEE	; 238
 134:	fe 4f       	sbci	r31, 0xFE	; 254
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 83       	st	Z, r24
 13a:	06 c0       	rjmp	.+12     	; 0x148 <__vector_4+0xa2>
 13c:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <counter>
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	ee 5e       	subi	r30, 0xEE	; 238
 144:	fe 4f       	sbci	r31, 0xFE	; 254
 146:	10 82       	st	Z, r1
 148:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <counter>
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	e4 5f       	subi	r30, 0xF4	; 244
 150:	fe 4f       	sbci	r31, 0xFE	; 254
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 83       	st	Z, r24
 156:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <xorPinC>
 15a:	86 95       	lsr	r24
 15c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <xorPinC>
 160:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <counter>
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <counter>
 16a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <counter>
 16e:	85 30       	cpi	r24, 0x05	; 5
 170:	08 f4       	brcc	.+2      	; 0x174 <__vector_4+0xce>
 172:	bc cf       	rjmp	.-136    	; 0xec <__vector_4+0x46>
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	2f 91       	pop	r18
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <__vector_11>:
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
 19a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <counter>
 19e:	25 c0       	rjmp	.+74     	; 0x1ea <__vector_11+0x62>
 1a0:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <counter>
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	e4 5f       	subi	r30, 0xF4	; 244
 1a8:	fe 4f       	sbci	r31, 0xFE	; 254
 1aa:	80 81       	ld	r24, Z
 1ac:	81 11       	cpse	r24, r1
 1ae:	18 c0       	rjmp	.+48     	; 0x1e0 <__vector_11+0x58>
 1b0:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <counter>
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	e4 5f       	subi	r30, 0xF4	; 244
 1b8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	80 83       	st	Z, r24
 1be:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <counter>
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	ee 5e       	subi	r30, 0xEE	; 238
 1c6:	fe 4f       	sbci	r31, 0xFE	; 254
 1c8:	80 83       	st	Z, r24
 1ca:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <counter>
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	ee 0f       	add	r30, r30
 1d2:	ff 1f       	adc	r31, r31
 1d4:	e0 50       	subi	r30, 0x00	; 0
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	9b e0       	ldi	r25, 0x0B	; 11
 1dc:	91 83       	std	Z+1, r25	; 0x01
 1de:	80 83       	st	Z, r24
 1e0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <counter>
 1e4:	8f 5f       	subi	r24, 0xFF	; 255
 1e6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <counter>
 1ea:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <counter>
 1ee:	85 30       	cpi	r24, 0x05	; 5
 1f0:	b8 f2       	brcs	.-82     	; 0x1a0 <__vector_11+0x18>
 1f2:	ff 91       	pop	r31
 1f4:	ef 91       	pop	r30
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <init>:
 204:	87 b1       	in	r24, 0x07	; 7
 206:	80 62       	ori	r24, 0x20	; 32
 208:	87 b9       	out	0x07, r24	; 7
 20a:	18 b8       	out	0x08, r1	; 8
 20c:	08 95       	ret

0000020e <LEDOFF>:
 20e:	88 b1       	in	r24, 0x08	; 8
 210:	8f 7d       	andi	r24, 0xDF	; 223
 212:	88 b9       	out	0x08, r24	; 8
 214:	08 95       	ret

00000216 <readSensors>:
}

void readSensors(void){
	cli();
 216:	f8 94       	cli
	LEDOFF();
 218:	0e 94 07 01 	call	0x20e	; 0x20e <LEDOFF>
	
	
	prevPinC = (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0);
 21c:	8f e1       	ldi	r24, 0x1F	; 31
 21e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <prevPinC>
	for(uint8_t i = 0; i < 5; ++i){
 222:	20 e0       	ldi	r18, 0x00	; 0
 224:	0e c0       	rjmp	.+28     	; 0x242 <readSensors+0x2c>
		hasBeenRead[i] = 0;
 226:	82 2f       	mov	r24, r18
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	fc 01       	movw	r30, r24
 22c:	e4 5f       	subi	r30, 0xF4	; 244
 22e:	fe 4f       	sbci	r31, 0xFE	; 254
 230:	10 82       	st	Z, r1
		times[i] = 0;
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	fc 01       	movw	r30, r24
 238:	e0 50       	subi	r30, 0x00	; 0
 23a:	ff 4f       	sbci	r31, 0xFF	; 255
 23c:	11 82       	std	Z+1, r1	; 0x01
 23e:	10 82       	st	Z, r1
	cli();
	LEDOFF();
	
	
	prevPinC = (1 << 4) | (1 << 3) | (1 << 2) | (1 << 1) | (1 << 0);
	for(uint8_t i = 0; i < 5; ++i){
 240:	2f 5f       	subi	r18, 0xFF	; 255
 242:	25 30       	cpi	r18, 0x05	; 5
 244:	80 f3       	brcs	.-32     	; 0x226 <readSensors+0x10>
		hasBeenRead[i] = 0;
		times[i] = 0;
	}
	PORTC = 0x00;
 246:	18 b8       	out	0x08, r1	; 8
	TCNT1 = 0;
 248:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 24c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1A = 0;
 250:	a0 e8       	ldi	r26, 0x80	; 128
 252:	b0 e0       	ldi	r27, 0x00	; 0
 254:	1c 92       	st	X, r1
	TCCR1B = 0;
 256:	e1 e8       	ldi	r30, 0x81	; 129
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	10 82       	st	Z, r1
	TCCR1C = 0;
 25c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
	
	TCCR1A = (1 << COM1A1) | (0 << COM1A0);
 260:	80 e8       	ldi	r24, 0x80	; 128
 262:	8c 93       	st	X, r24
	OCR1A = TIMEOUT;
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	9b e0       	ldi	r25, 0x0B	; 11
 268:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 26c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = (1 << OCIE1A);
 270:	92 e0       	ldi	r25, 0x02	; 2
 272:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	
	//charge capacitors
	DDRC |= (1 << DDC0) | (1 << DDC1) | (1 << DDC2) | (1 << DDC3) | (1 << DDC4);
 276:	87 b1       	in	r24, 0x07	; 7
 278:	8f 61       	ori	r24, 0x1F	; 31
 27a:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC0) | (1 << PORTC1) | (1 << PORTC2) | (1 << PORTC3) | (1 << PORTC4);
 27c:	88 b1       	in	r24, 0x08	; 8
 27e:	8f 61       	ori	r24, 0x1F	; 31
 280:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 282:	82 e4       	ldi	r24, 0x42	; 66
 284:	8a 95       	dec	r24
 286:	f1 f7       	brne	.-4      	; 0x284 <readSensors+0x6e>
 288:	00 c0       	rjmp	.+0      	; 0x28a <readSensors+0x74>
	_delay_us(10);
	
	//LEDs ON
	DDRC |= (1 << DDC5);
 28a:	87 b1       	in	r24, 0x07	; 7
 28c:	80 62       	ori	r24, 0x20	; 32
 28e:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC5);
 290:	88 b1       	in	r24, 0x08	; 8
 292:	80 62       	ori	r24, 0x20	; 32
 294:	88 b9       	out	0x08, r24	; 8
	
	TCCR1B = (1 << CS11);
 296:	90 83       	st	Z, r25
	DDRC &= ~((1 << DDC0) | (1 << DDC1) | (1 << DDC2) | (1 << DDC3) | (1 << DDC4));
 298:	87 b1       	in	r24, 0x07	; 7
 29a:	80 7e       	andi	r24, 0xE0	; 224
 29c:	87 b9       	out	0x07, r24	; 7
	
	//Interrupts on
	PCICR |= (1 << PCIE1);
 29e:	e8 e6       	ldi	r30, 0x68	; 104
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	82 60       	ori	r24, 0x02	; 2
 2a6:	80 83       	st	Z, r24
	PCMSK1 |= 0x1F;
 2a8:	ec e6       	ldi	r30, 0x6C	; 108
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	8f 61       	ori	r24, 0x1F	; 31
 2b0:	80 83       	st	Z, r24
	
	
	sei();
 2b2:	78 94       	sei
	while(1)
	{
		if(hasBeenRead[0] == 1 && hasBeenRead[1] == 1 && hasBeenRead[2] == 1 && hasBeenRead[3] == 1 && hasBeenRead[4] == 1){
 2b4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <hasBeenRead>
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <readSensors+0x9e>
 2bc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <hasBeenRead+0x1>
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	c1 f7       	brne	.-16     	; 0x2b4 <readSensors+0x9e>
 2c4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <hasBeenRead+0x2>
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	a1 f7       	brne	.-24     	; 0x2b4 <readSensors+0x9e>
 2cc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <hasBeenRead+0x3>
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	81 f7       	brne	.-32     	; 0x2b4 <readSensors+0x9e>
 2d4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <hasBeenRead+0x4>
 2d8:	81 30       	cpi	r24, 0x01	; 1
 2da:	61 f7       	brne	.-40     	; 0x2b4 <readSensors+0x9e>
			break;
		}
	}
	
	TCCR1B = 0;
 2dc:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 2e0:	08 95       	ret

000002e2 <motorSetup>:

}

void motorSetup(void){
	//Turn off motors
	DDRB = (1 << DDB3);
 2e2:	88 e0       	ldi	r24, 0x08	; 8
 2e4:	84 b9       	out	0x04, r24	; 4
	DDRD = (1 << DDD3) | (1 << DDD5) | (1 << DDD6);
 2e6:	88 e6       	ldi	r24, 0x68	; 104
 2e8:	8a b9       	out	0x0a, r24	; 10
	PORTB = 0x00;
 2ea:	15 b8       	out	0x05, r1	; 5
	PORTD = 0x00;
 2ec:	1b b8       	out	0x0b, r1	; 11
 2ee:	08 95       	ret

000002f0 <main>:


int main(void)
{
	
	motorSetup();
 2f0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <motorSetup>
	init();
 2f4:	0e 94 02 01 	call	0x204	; 0x204 <init>
    while (1) 
    {
		readSensors();
 2f8:	0e 94 0b 01 	call	0x216	; 0x216 <readSensors>
 2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <main+0x8>

000002fe <_exit>:
 2fe:	f8 94       	cli

00000300 <__stop_program>:
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
